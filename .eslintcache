[{"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\index.js":"1","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\Root.js":"2","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\App.js":"3","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\index.js":"4","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\spinner\\index.jsx":"5","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\navigation-bar\\index.jsx":"6","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\video-recording-page\\video-recording-page.jsx":"7","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\appointment-request-page\\appointment-request-page.jsx":"8","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\medical-reports-page\\medical-reports-page.jsx":"9","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\messages-page\\messages-page.jsx":"10","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\utils\\constantList.js":"11","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\sign-in-page\\sign-in-authorization.js":"12","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\sign-in-page\\sign-in-authorization.js":"13","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\home-page\\home-page.jsx":"14","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\sign-in-page\\sign-in-page.jsx":"15","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\sign-in-page\\index.js":"16","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\sign-in-card.js":"17","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\sign-up-card.js":"18","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\sign-in-page\\sign-in-authorization.js":"19","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\radio-buttons\\index.jsx":"20","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\utils\\regularExpressions.js":"21","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\utils\\api.js":"22","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\user\\index.js":"23","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\user\\current-user.js":"24","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\user\\current-user.js":"25","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\user\\current-user.js":"26","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\unverified-email-card.js":"27","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\use-styles.js":"28","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\radio-buttons\\index-styles.js":"29","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\sign-in-page\\sign-in-page-styles.js":"30","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\navigation-bar\\navigation-bar-styles.js":"31","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\home-page\\home-page-styles.js":"32","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\verification-code-card.js":"33","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\messages-page\\index.js":"34","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\messages-page\\messages.js":"35","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\messages-page\\messages.js":"36","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\messages-page\\messages.js":"37","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\messages\\sidebar-user.jsx":"38","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\medical-reports-page\\index.js":"39","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\medical-reports-page\\reports.js":"40","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\medical-reports-page\\reports.js":"41","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\medical-reports-patient-view.jsx":"42","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\medical-reports-doctor-view.jsx":"43","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\use-styles.js":"44","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\medical-reports-page\\reports.js":"45","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\doctor-dialog-box.jsx":"46"},{"size":1094,"mtime":1615732900789,"results":"47","hashOfConfig":"48"},{"size":454,"mtime":1612749122321,"results":"49","hashOfConfig":"48"},{"size":2646,"mtime":1612749122313,"results":"50","hashOfConfig":"48"},{"size":361,"mtime":1615513983454,"results":"51","hashOfConfig":"48"},{"size":249,"mtime":1612749122393,"results":"52","hashOfConfig":"48"},{"size":4526,"mtime":1612888777214,"results":"53","hashOfConfig":"48"},{"size":546,"mtime":1612749122449,"results":"54","hashOfConfig":"48"},{"size":567,"mtime":1612749122401,"results":"55","hashOfConfig":"48"},{"size":1900,"mtime":1615571483695,"results":"56","hashOfConfig":"48"},{"size":4467,"mtime":1615473470146,"results":"57","hashOfConfig":"48"},{"size":2803,"mtime":1615571483665,"results":"58","hashOfConfig":"48"},{"size":1411,"mtime":1614991790763,"results":"59","hashOfConfig":"48"},{"size":9786,"mtime":1615473470170,"results":"60","hashOfConfig":"48"},{"size":3074,"mtime":1615232226950,"results":"61","hashOfConfig":"48"},{"size":2486,"mtime":1614991790634,"results":"62","hashOfConfig":"48"},{"size":201,"mtime":1612749122482,"results":"63","hashOfConfig":"48"},{"size":5273,"mtime":1614991790610,"results":"64","hashOfConfig":"48"},{"size":7467,"mtime":1614991790618,"results":"65","hashOfConfig":"48"},{"size":7101,"mtime":1614991790763,"results":"66","hashOfConfig":"48"},{"size":2591,"mtime":1612749122385,"results":"67","hashOfConfig":"48"},{"size":740,"mtime":1614991790779,"results":"68","hashOfConfig":"48"},{"size":633,"mtime":1612749122542,"results":"69","hashOfConfig":"48"},{"size":164,"mtime":1612749122518,"results":"70","hashOfConfig":"48"},{"size":616,"mtime":1615473470191,"results":"71","hashOfConfig":"48"},{"size":338,"mtime":1615473470203,"results":"72","hashOfConfig":"48"},{"size":219,"mtime":1612749122473,"results":"73","hashOfConfig":"48"},{"size":1591,"mtime":1614991790626,"results":"74","hashOfConfig":"48"},{"size":715,"mtime":1612749122353,"results":"75","hashOfConfig":"48"},{"size":157,"mtime":1612749122377,"results":"76","hashOfConfig":"48"},{"size":719,"mtime":1612749122433,"results":"77","hashOfConfig":"48"},{"size":766,"mtime":1612888828783,"results":"78","hashOfConfig":"48"},{"size":463,"mtime":1612749122409,"results":"79","hashOfConfig":"48"},{"size":3566,"mtime":1614991790626,"results":"80","hashOfConfig":"48"},{"size":170,"mtime":1615473470178,"results":"81","hashOfConfig":"48"},{"size":2108,"mtime":1615473470146,"results":"82","hashOfConfig":"48"},{"size":681,"mtime":1615473470178,"results":"83","hashOfConfig":"48"},{"size":243,"mtime":1615473470191,"results":"84","hashOfConfig":"48"},{"size":776,"mtime":1615473470138,"results":"85","hashOfConfig":"48"},{"size":179,"mtime":1615513983446,"results":"86","hashOfConfig":"48"},{"size":2012,"mtime":1615729956657,"results":"87","hashOfConfig":"48"},{"size":4504,"mtime":1615731797664,"results":"88","hashOfConfig":"48"},{"size":4036,"mtime":1615734115540,"results":"89","hashOfConfig":"48"},{"size":4791,"mtime":1615733496399,"results":"90","hashOfConfig":"48"},{"size":1045,"mtime":1615728783489,"results":"91","hashOfConfig":"48"},{"size":850,"mtime":1615729956662,"results":"92","hashOfConfig":"48"},{"size":4546,"mtime":1615734621495,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lvlhem",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"98"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\index.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\Root.js",[],["192","193"],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\App.js",["194"],"import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom';\r\nimport NavigationBar from './components/navigation-bar/index';\r\nimport SignInPage from './pages/sign-in-page/sign-in-page';\r\nimport HomePage from './pages/home-page/home-page';\r\nimport MessagesPage from \"./pages/messages-page/messages-page\";\r\nimport MedicalReportsPage from \"./pages/medical-reports-page/medical-reports-page\";\r\nimport AppointmentRequestPage from \"./pages/appointment-request-page/appointment-request-page\";\r\nimport VideoRecordingPage from \"./pages/video-recording-page/video-recording-page\";\r\nimport {checkToken} from \"./redux/actions/sign-in-page/sign-in-authorization\";\r\nimport {getIsCheckingForToken} from \"./redux/selectors/sign-in-page/sign-in-authorization\";\r\nimport Spinner from \"./components/spinner\";\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.checkToken();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isCheckingForToken === true) {\r\n      return <Spinner/>\r\n    }\r\n\r\n    const token = localStorage.getItem(\"idToken\");\r\n    const tokenExists = (token !== undefined && token !== null && token !== '');\r\n\r\n    // If a token is not stored, then only return the homepage. Otherwise, return the rest of the app.\r\n    if (!tokenExists) {\r\n      return (\r\n          <Router>\r\n            <div>\r\n              <Redirect to='/'/>\r\n              <Route path=\"/\" exact component={SignInPage}/>\r\n            </div>\r\n          </Router>\r\n      )\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n          <div>\r\n            <NavigationBar/>\r\n            <Switch>\r\n              <Route path=\"/\" exact component={SignInPage}/>\r\n              <Route path=\"/home-page\" exact component={HomePage}/>\r\n              <Route path=\"/messages\" exact component={MessagesPage}/>\r\n              <Route path=\"/medical-reports\" exact component={MedicalReportsPage}/>\r\n              <Route path=\"/appointment-request\" exact component={AppointmentRequestPage}/>\r\n              <Route path=\"/video-recording\" exact component={VideoRecordingPage}/>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  checkToken: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isCheckingForToken: getIsCheckingForToken(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  checkToken: () => dispatch(checkToken())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\index.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\spinner\\index.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\navigation-bar\\index.jsx",["195"],"import React from 'react';\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from \"prop-types\";\r\nimport {getFullName} from '../../redux/selectors/user/current-user';\r\nimport {signOut} from \"../../redux/actions/sign-in-page/sign-in-authorization\";\r\nimport {navigationBarStyles} from \"./navigation-bar-styles\";\r\nimport {AppBar, Divider, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport Logo from '../../utils/images/TeleClinicLogoWhite.png';\r\n\r\nconst NavigationBar = ({fullName, signOut}) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const classes = navigationBarStyles();\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                {\r\n                    (location.pathname !== \"/home-page\") ?\r\n                        (\r\n                            <IconButton onClick={() => history.push(\"/home-page\")}>\r\n                                <img src={Logo} alt=\"logo\" className={classes.otherPageLogo}/>\r\n                            </IconButton>\r\n                        )\r\n                            :\r\n                        (\r\n                            <img src={Logo} alt=\"logo\" className={classes.homePageLogo}/>\r\n                        )\r\n                }\r\n                {\r\n                    (location.pathname !== \"/home-page\") ?\r\n                        (\r\n                            <div className={classes.leftSide}>\r\n                                <IconButton\r\n                                    onClick={() => history.push(\"/messages\")}\r\n                                >\r\n                                    <p className={classes.menuButton}>\r\n                                        Messages\r\n                                    </p>\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    className={classes.menuButton}\r\n                                    onClick={() => history.push(\"/medical-reports\")}\r\n                                >\r\n                                    <p className={classes.menuButton}>\r\n                                        Medical Reports\r\n                                    </p>\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    className={classes.menuButton}\r\n                                    onClick={() => history.push(\"/appointment-request\")}\r\n                                >\r\n                                    <p className={classes.menuButton}>\r\n                                        Appointment Requests\r\n                                    </p>\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    className={classes.menuButton}\r\n                                    onClick={() => history.push(\"/video-recording\")}\r\n                                >\r\n                                    <p className={classes.menuButton}>\r\n                                        Video Recordings\r\n                                    </p>\r\n                                </IconButton>\r\n                            </div>\r\n                        )\r\n                            :\r\n                        (\r\n                            <div className={classes.leftSide}>\r\n                                <h2 className={classes.homePageTitle}>\r\n                                    Home Page\r\n                                </h2>\r\n                            </div>\r\n                        )\r\n                    }\r\n                <h3 className={classes.fullNameTitle}>\r\n                    Hello, {fullName}!\r\n                </h3>\r\n                <Divider orientation=\"vertical\" flexItem={true} className={classes.divider}/>\r\n                <IconButton onClick={signOut} style={{marginLeft: 20}}>\r\n                    <ExitToAppIcon className={classes.signOutButton}/>\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nNavigationBar.propTypes = {\r\n    fullName: PropTypes.string.isRequired,\r\n    signOut: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    fullName: getFullName(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signOut: () => dispatch(signOut())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar);\r\n","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\video-recording-page\\video-recording-page.jsx",["196","197"],"import React from 'react';\r\nimport './video-recording-page.css';\r\nimport {makeStyles, } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n}));\r\n\r\nconst VideoRecordingPage = () => {\r\n    return (\r\n        <div>\r\n            To be included (Video Recording Page)\r\n        </div>\r\n    );\r\n};\r\n\r\nVideoRecordingPage.propTypes = {\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(VideoRecordingPage);\r\n","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\appointment-request-page\\appointment-request-page.jsx",["198","199"],"import React from 'react';\r\nimport './appointment-request-page.css';\r\nimport {makeStyles, } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n}));\r\n\r\nconst AppointmentRequestPage = () => {\r\n    return (\r\n        <div>\r\n            To be included (Appointment Requests Page)\r\n        </div>\r\n    );\r\n};\r\n\r\nAppointmentRequestPage.propTypes = {\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(AppointmentRequestPage);\r\n","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\medical-reports-page\\medical-reports-page.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\messages-page\\messages-page.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\utils\\constantList.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\sign-in-page\\sign-in-authorization.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\sign-in-page\\sign-in-authorization.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\home-page\\home-page.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\sign-in-page\\sign-in-page.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\sign-in-page\\index.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\sign-in-card.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\sign-up-card.js",["200"],"import {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Link,\r\n    Button,\r\n    TextField,\r\n    CardMedia\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport './_style.css';\r\nimport {\r\n    showSignInScreen,\r\n    setFirstName,\r\n    setLastName,\r\n    setEmail,\r\n    setPassword,\r\n    setConfirmedPassword,\r\n    regularOrSpecialSignUp\r\n} from '../../../redux/actions/sign-in-page/sign-in-authorization';\r\nimport {\r\n    getFirstName,\r\n    getLastName,\r\n    getEmail,\r\n    getErrors,\r\n    getIsShowingErrors\r\n} from '../../../redux/selectors/sign-in-page/sign-in-authorization';\r\nimport UserTypeRadioButtons from '../../radio-buttons';\r\nimport {\r\n    ASTERISK_MARKS_REQUIRED_FIELD,\r\n    EMPTY_REQUIRED_FIELD,\r\n    signInFieldErrors\r\n} from '../../../utils/constantList';\r\nimport {useStyles} from './use-styles';\r\nimport Logo from \"../../../utils/images/TeleClinicLogo.png\";\r\n\r\nconst SignUpCard = ({\r\n                        firstName, lastName, email, errors, showErrors, showSignInScreen, setFirstName, setLastName,\r\n                        setEmail, setPassword, setConfirmedPassword, signUp\r\n                    }) =>\r\n{\r\n    const classes = useStyles();\r\n\r\n    const showError = type => Boolean(showErrors && type);\r\n    const showMissingFieldError = () => {\r\n        let result = '';\r\n        if (showErrors) {\r\n            Object.values(errors).filter(item =>\r\n            {\r\n                if (item === EMPTY_REQUIRED_FIELD)\r\n                    result = ASTERISK_MARKS_REQUIRED_FIELD\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const signUpOnEnter = e => {\r\n        if (e.which === 13) {\r\n            setPassword(e.target.value.trim());\r\n            signUp();\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={classes.paper}>\r\n            <CardMedia>\r\n                <img src={Logo} alt={\"TeleClinic Logo\"}/>\r\n            </CardMedia>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign up\r\n            </Typography>\r\n            <form className={classes.form} noValidate>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-around\"\r\n                    alignItems=\"flex-start\">\r\n                    <Grid item>\r\n                        <TextField\r\n                            error={showError(errors.firstName)}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            id=\"firstName\"\r\n                            label=\"First Name\"\r\n                            name=\"firstName\"\r\n                            onChange={e => setFirstName(e.target.value.trim())}\r\n                            defaultValue={firstName}\r\n                        />\r\n                        <p className={'error-color'}>{signInFieldErrors(errors.firstName)}</p>\r\n                    </Grid>\r\n                    <Grid>\r\n                        <TextField\r\n                            error={showError(errors.lastName)}\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            id=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            onChange={e => setLastName(e.target.value.trim())}\r\n                            name=\"lastName\"\r\n                            defaultValue={lastName}\r\n                        />\r\n                        <p className={'error-color'}>{signInFieldErrors(errors.lastName)}</p>\r\n                    </Grid>\r\n                </Grid>\r\n                <UserTypeRadioButtons/>\r\n                <TextField\r\n                    error={showError(errors.email)}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    defaultValue={email}\r\n                    onBlur={e => setEmail(e.target.value.trim())}\r\n                    autoComplete=\"email\"\r\n                />\r\n                <p className={'error-message'}>{signInFieldErrors(errors.email)}</p>\r\n                <TextField\r\n                    error={showError(errors.password)}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    onChange={e => setPassword(e.target.value.trim())}\r\n                />\r\n                <TextField\r\n                    error={showError(errors.password)}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"confirmPassword\"\r\n                    label=\"Confirm Password\"\r\n                    type=\"password\"\r\n                    id=\"confirmPassword\"\r\n                    onChange={e => setConfirmedPassword(e.target.value.trim())}\r\n                    onKeyPress={e => signUpOnEnter(e)}\r\n                />\r\n                <p className={'error-message'}>{signInFieldErrors(errors.password)}</p>\r\n                <p className={'error-message'}>{showMissingFieldError()}</p>\r\n                <Button\r\n                    // type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    className={classes.submit}\r\n                    onClick={signUp}\r\n                >\r\n                    Sign Up\r\n                </Button>\r\n                <Grid container style={{justifyContent: 'center'}}>\r\n                    <Link href=\"#\" variant=\"body2\" onClick={showSignInScreen}>\r\n                        {\"Already have an account? Sign in here!\"}\r\n                    </Link>\r\n                </Grid>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nSignUpCard.propTypes = {\r\n    firstName: PropTypes.string.isRequired,\r\n    lastName: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    showErrors: PropTypes.bool.isRequired,\r\n    showSignInScreen: PropTypes.func.isRequired,\r\n    setFirstName: PropTypes.func.isRequired,\r\n    setLastName: PropTypes.func.isRequired,\r\n    setEmail: PropTypes.func.isRequired,\r\n    setPassword: PropTypes.func.isRequired,\r\n    setConfirmedPassword: PropTypes.func.isRequired,\r\n    signUp: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    firstName: getFirstName(state),\r\n    lastName: getLastName(state),\r\n    email: getEmail(state),\r\n    errors: getErrors(state),\r\n    showErrors: getIsShowingErrors(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showSignInScreen: () => dispatch(showSignInScreen()),\r\n    setFirstName: firstName => dispatch(setFirstName(firstName)),\r\n    setLastName: lastName => dispatch(setLastName(lastName)),\r\n    setEmail: email => dispatch(setEmail(email)),\r\n    setPassword: password => dispatch(setPassword(password)),\r\n    setConfirmedPassword: confirmedPassword => dispatch(setConfirmedPassword(confirmedPassword)),\r\n    signUp: () => dispatch(regularOrSpecialSignUp())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpCard);\r\n","C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\sign-in-page\\sign-in-authorization.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\radio-buttons\\index.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\utils\\regularExpressions.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\utils\\api.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\user\\index.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\user\\current-user.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\user\\current-user.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\user\\current-user.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\unverified-email-card.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\use-styles.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\radio-buttons\\index-styles.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\sign-in-page\\sign-in-page-styles.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\navigation-bar\\navigation-bar-styles.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\pages\\home-page\\home-page-styles.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\sign-in-cards\\verification-code-card.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\messages-page\\index.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\messages-page\\messages.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\messages-page\\messages.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\messages-page\\messages.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\messages\\sidebar-user.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\medical-reports-page\\index.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\reducers\\medical-reports-page\\reports.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\actions\\medical-reports-page\\reports.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\medical-reports-patient-view.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\medical-reports-doctor-view.jsx",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\use-styles.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\redux\\selectors\\medical-reports-page\\reports.js",[],"C:\\Users\\JayBh\\WebstormProjects\\teleclinic\\src\\components\\cards\\medical-reports-cards\\doctor-dialog-box.jsx",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":24,"column":3,"nodeType":"207","messageId":"208","endLine":26,"endColumn":4},{"ruleId":"209","severity":1,"message":"210","line":8,"column":47,"nodeType":"211","messageId":"212","endLine":8,"endColumn":57},{"ruleId":"209","severity":1,"message":"213","line":4,"column":8,"nodeType":"211","messageId":"212","endLine":4,"endColumn":17},{"ruleId":"209","severity":1,"message":"214","line":7,"column":7,"nodeType":"211","messageId":"212","endLine":7,"endColumn":16},{"ruleId":"209","severity":1,"message":"213","line":4,"column":8,"nodeType":"211","messageId":"212","endLine":4,"endColumn":17},{"ruleId":"209","severity":1,"message":"214","line":7,"column":7,"nodeType":"211","messageId":"212","endLine":7,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":49,"column":47,"nodeType":"217","messageId":"218","endLine":49,"endColumn":49},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'useStyles' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]